(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{78:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return b}));var a=n(2),r=n(6),o=(n(0),n(92)),i={id:"onefx-web",title:"Web",sidebar_label:"Web",slug:"/"},l={unversionedId:"onefx-web",id:"onefx-web",isDocsHomePage:!1,title:"Web",description:"OneFx is a full-stack framework for building web apps. Here are the features you\u2019ll find in Onefx.js:",source:"@site/docs/onefx-web.md",slug:"/",permalink:"/docs/",editUrl:"https://github.com/puncsky/stargately-docs/edit/master/website/docs/onefx-web.md",version:"current",sidebar_label:"Web",sidebar:"someSidebar",next:{title:"Mobile",permalink:"/docs/onefx-mobile"}},c=[{value:"Create a project",id:"create-a-project",children:[]},{value:"Run your project",id:"run-your-project",children:[{value:"Development mode",id:"development-mode",children:[]},{value:"Production Mode",id:"production-mode",children:[]},{value:"NPM scripts",id:"npm-scripts",children:[]}]},{value:"Code Styles",id:"code-styles",children:[]},{value:"Architecture",id:"architecture",children:[]},{value:"State management",id:"state-management",children:[]},{value:"Styling",id:"styling",children:[]},{value:"Routing",id:"routing",children:[]},{value:"Fetching data",id:"fetching-data",children:[{value:"Make a query",id:"make-a-query",children:[]},{value:"Organizing components with data",id:"organizing-components-with-data",children:[]}]},{value:"Internationalization",id:"internationalization",children:[{value:"React / Client-side",id:"react--client-side",children:[]},{value:"Server-side",id:"server-side",children:[]}]},{value:"Testing",id:"testing",children:[]},{value:"Security",id:"security",children:[]},{value:"Static assets",id:"static-assets",children:[]},{value:"Configuration",id:"configuration",children:[{value:"Environment variables",id:"environment-variables",children:[]},{value:"Static configuration",id:"static-configuration",children:[]},{value:"CDN",id:"cdn",children:[]}]},{value:"References",id:"references",children:[]},{value:"Run on Windows",id:"run-on-windows",children:[]}],s={rightToc:c};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"OneFx is a full-stack framework for building web apps. Here are the features you\u2019ll find in Onefx.js:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Server-side rendering and universal rendering with React and Redux"),Object(o.b)("li",{parentName:"ul"},"Apollo GraphQL (docs + playground), ES2017, TypeScript, TSX support out of the box"),Object(o.b)("li",{parentName:"ul"},"Server-side development via Koa.js")),Object(o.b)("h2",{id:"create-a-project"},"Create a project"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"git clone https://github.com/puncsky/web-onefx-boilerplate.git my-awesome-project\n")),Object(o.b)("h2",{id:"run-your-project"},"Run your project"),Object(o.b)("p",null,"This is intended for *nix users. If you use Windows, go to ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#run-on-windows"}),"Run on Windows"),". Let\u2019s first prepare the environment."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"cd my-awesome-project\n\nnvm use 10.15.0\nnpm install\n\n# prepare environment variable\ncp ./.env.tmpl ./.env\n")),Object(o.b)("h3",{id:"development-mode"},"Development mode"),Object(o.b)("p",null,"To run your project in development mode, run:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"npm run watch\n")),Object(o.b)("p",null,"The development site will be available at ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"http://localhost:5000"}),"http://localhost:5000"),"."),Object(o.b)("h3",{id:"production-mode"},"Production Mode"),Object(o.b)("p",null,"It\u2019s sometimes useful to run a project in production mode, for example, to check bundle size or to debug a production-only issue. To run your project in production mode locally, run:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"npm run build-production\nNODE_ENV=production npm run start\n")),Object(o.b)("h3",{id:"npm-scripts"},"NPM scripts"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"npm run test"),": test the whole project and generate a test coverage"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"npm run ava ./path/to/test-file.js"),": run a specific test file"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"npm run build"),": build source code from ",Object(o.b)("inlineCode",{parentName:"li"},"src")," to ",Object(o.b)("inlineCode",{parentName:"li"},"dist")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"npm run lint"),": run the linter"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"npm run flow"),": run the flow type check"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"npm run kill"),": kill the node server occupying the port 4100.")),Object(o.b)("h2",{id:"code-styles"},"Code Styles"),Object(o.b)("p",null,"We use prettier, tslint, and editorconfig to enforce consistent styles across the whole project, so that we will not bikeshed on coding styles in the code review."),Object(o.b)("p",null,"However, please visit our ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/onefx-style-guide"}),"Contributing Code")," before submitting your code."),Object(o.b)("h2",{id:"architecture"},"Architecture"),Object(o.b)("p",null,Object(o.b)("img",Object(a.a)({parentName:"p"},{src:"https://res.cloudinary.com/dohtidfqh/image/upload/v1546379050/web-guiguio/onefx-architecture.png",alt:"Onefx Architecture"}))),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-txt"}),".\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 ava.config.js           // ava test util configuration\n\u251c\u2500\u2500 babel.config.js         // babel compiler/transpiler configuration\n\u251c\u2500\u2500 babel-register.js.      // babel register options\n\u251c\u2500\u2500 config                  // project configuration\n\u2502\xa0\xa0 \u251c\u2500\u2500 default.js          // base config to be extended in all env\n\u2502\xa0\xa0 \u251c\u2500\u2500 development.js      // config in NODE_ENV=development\n\u2502\xa0\xa0 \u251c\u2500\u2500 production.js       // config in NODE_ENV=production\n\u2502\xa0\xa0 \u2514\u2500\u2500 test.js             // config in NODE_ENV=test\n\u251c\u2500\u2500 coverage                // test coverage\n\u251c\u2500\u2500 dist                    // destination for src build result\n\u251c\u2500\u2500 gulpfile.babel.js       // gulp task runner config\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 renovate.json           // renovate bot to automate dependency bumps\n\u251c\u2500\u2500 server.ts               // project entry\n\u251c\u2500\u2500 src                               // source code\n\u2502\xa0\xa0 \u251c\u2500\u2500 api-gateway                   // APIs server defined in GraphQL for the clients to call\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 api-gateway.graphql\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 api-gateway.ts\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 resolvers\n\u2502\xa0\xa0 \u2502\xa0\xa0     \u2514\u2500\u2500 meta-resolver.ts\n\u2502\xa0\xa0 \u251c\u2500\u2500 client                        // browser-side source code\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 javascripts\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 main.tsx\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 static\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 favicon.png\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 manifest.json\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 robots.txt\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 stylesheets\n\u2502\xa0\xa0 \u2502\xa0\xa0     \u2514\u2500\u2500 main.scss\n\u2502\xa0\xa0 \u251c\u2500\u2500 model                         // data models\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 index.ts\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 model.ts\n\u2502\xa0\xa0 \u251c\u2500\u2500 server                        // onefx server\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 index.ts\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 middleware                // koa middleware\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 index.ts\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 manifest-middleware.ts\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 set-middleware.ts\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 server-routes.tsx          // server-side routes\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 start-server.tsx           // server initialization\n\u2502\xa0\xa0 \u2514\u2500\u2500 shared                        // js code shared by both the server and the client\n\u2502\xa0\xa0     \u251c\u2500\u2500 app-container.ts\n\u2502\xa0\xa0     \u251c\u2500\u2500 app.ts\n\u2502\xa0\xa0     \u251c\u2500\u2500 common\n\u2502\xa0\xa0     \u251c\u2500\u2500 home\n\u2502\xa0\xa0     \u2502\xa0\xa0 \u2514\u2500\u2500 home.ts\n\u2502\xa0\xa0     \u2514\u2500\u2500 register-service-worker.js\n\u251c\u2500\u2500 translations          // translations supported in this website\n\u2502\xa0\xa0 \u251c\u2500\u2500 en.yaml\n\u2502\xa0\xa0 \u2514\u2500\u2500 zh-cn.yaml\n\u251c\u2500\u2500 Procfile                // heroku Procfile\n\u2514\u2500\u2500 webpack.js            // webpack bundler config\n")),Object(o.b)("h1",{id:"guides"},"Guides"),Object(o.b)("h2",{id:"state-management"},"State management"),Object(o.b)("p",null,"We use redux to manage state in onefx.js. To pass the state from the server to the initial page during the server-side rendering, in the server use ",Object(o.b)("inlineCode",{parentName:"p"},"ctx.setState(path, val)")," to set the state:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"server.get('SPA', '/*', function onRoute(ctx) {\n  ctx.setState('base.sampleState', 'this is a sample initial state');\n  ctx.body = ctx.isoReactRender({\n    VDom: (\n      <AppContainer/>\n    ),\n    reducer: noopReducer,\n    clientScript: '/main.js',\n  });\n});\n")),Object(o.b)("p",null,"And use the state in the react component:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const SampleStateContainer = connect(\n  state => ({text: state.base.sampleState})\n)(function SampleState({text}) {\n  return (\n    <div>{text}</div>\n  );\n});\n")),Object(o.b)("h2",{id:"styling"},"Styling"),Object(o.b)("p",null,"We support both global styles with ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://sass-lang.com/guide"}),"sass")," in ",Object(o.b)("inlineCode",{parentName:"p"},"./src/client/stylesheets/main.scss")," and modular styles with ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/styletron/styletron/blob/master/packages/styletron-react/README.md"}),"styletron-react"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import react from 'react';\nimport {styled} from 'onefx/lib/styletron-react';\n\nconst Panel = styled('div', {\n  backgroundColor: 'silver',\n});\n\nexport default <Panel>Hello</Panel>;\n")),Object(o.b)("h2",{id:"routing"},"Routing"),Object(o.b)("p",null,"server-side routing is using ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/alexmingoia/koa-router"}),"koa-router")," and located in ",Object(o.b)("inlineCode",{parentName:"p"},"./src/server/server-routes.js"),". The basic usage is:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"server\n  .get('/', (ctx, next) => {\n    ctx.body = 'Hello World!';\n  })\n  .post('/users', (ctx, next) => {\n    // ...\n  })\n  .put('/users/:id', (ctx, next) => {\n    // ...\n  })\n  .del('/users/:id', (ctx, next) => {\n    // ...\n  })\n  .all('/users/:id', (ctx, next) => {\n    // ...\n  });\n")),Object(o.b)("p",null,"client-side routing is using ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://reacttraining.com/react-router/web/guides/quick-start"}),"react-router v4")," and located in ",Object(o.b)("inlineCode",{parentName:"p"},"./src/shared/app.js"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"<Switch>\n  <Route exact path='/' component={Home}/>\n  <Route component={NotFound}/>\n</Switch>\n")),Object(o.b)("h2",{id:"fetching-data"},"Fetching data"),Object(o.b)("p",null,"We use Apollo Graphql and TypeGraphQL for universal rendering with React. For detailed documentation, please visit:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://typegraphql.ml/docs/getting-started.html"}),"Define GraphQL schemas in TypeScript")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://www.apollographql.com/docs/tutorial/queries/"}),"Learn how to fetch data with the Apollo Query component"))),Object(o.b)("h3",{id:"make-a-query"},"Make a query"),Object(o.b)("p",null,"In ",Object(o.b)("inlineCode",{parentName:"p"},"src/api-gateway/resolvers/"),", define a new resolver and method. Take the meta data endpoint of the server health for example."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import { Query, Resolver, ResolverInterface } from "type-graphql";\n\n@Resolver(_ => String)\nexport class MetaResolver implements ResolverInterface<() => String> {\n  @Query(_ => String, { description: "is the server healthy?" })\n  public async health(): Promise<string> {\n    return "OK";\n  }\n}\n')),Object(o.b)("p",null,"and then in ",Object(o.b)("inlineCode",{parentName:"p"},"api-gateway.ts"),", mount the resolver."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"  const resolvers = [MetaResolver];\n")),Object(o.b)("p",null,"Now the server is ready and you can call the ",Object(o.b)("inlineCode",{parentName:"p"},"health")," endpoint at ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://localhost:5000/api-gateway/"}),"https://localhost:5000/api-gateway/"),"."),Object(o.b)("p",null,"The next step is to call it from the React component."),Object(o.b)("h3",{id:"organizing-components-with-data"},"Organizing components with data"),Object(o.b)("p",null,"Directory structure"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-txt"}),".\n\u251c\u2500\u2500 components\n\u2502\xa0\xa0 \u2514\u2500\u2500 health-text.tsx\n\u251c\u2500\u2500 data\n\u2502\xa0\xa0 \u251c\u2500\u2500 __generated__\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 health.ts\n\u2502\xa0\xa0 \u2514\u2500\u2500 queries.ts  // or / and mutations.ts\n\u251c\u2500\u2500 health-controller.tsx\n\u251c\u2500\u2500 hooks\n\u2502\xa0\xa0 \u2514\u2500\u2500 use-health.ts\n\u2514\u2500\u2500 index.ts\n")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"components")," is for view components only, for example ",Object(o.b)("inlineCode",{parentName:"p"},"health-text.tsx")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'import { colors } from "@/shared/common/styles/style-color";\nimport CheckCircleTwoTone from "@ant-design/icons/CheckCircleTwoTone";\nimport CloseCircleTwoTone from "@ant-design/icons/CloseCircleTwoTone";\nimport LoadingOutlined from "@ant-design/icons/LoadingOutlined";\nimport React from "react";\n\ntype Props = {\n  loading: boolean;\n  health?: string;\n  error: boolean;\n};\n\nexport const HealthText: React.FC<Props> = ({\n  loading,\n  health,\n  error\n}: Props) => {\n  if (loading) {\n    return (\n      <div>\n        <LoadingOutlined /> Checking Status\n      </div>\n    );\n  }\n  if (error) {\n    return (\n      <div>\n        <CloseCircleTwoTone twoToneColor={colors.error} /> Not OK\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <CheckCircleTwoTone twoToneColor={colors.success} /> {health}\n    </div>\n  );\n};\n')),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"data")," is for GraphQL queries and mutations. For example, ",Object(o.b)("inlineCode",{parentName:"p"},"health-controller.tsx"),". Whenever it changes, please run ",Object(o.b)("inlineCode",{parentName:"p"},"npm run schema:generate")," to generate type definitions again."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'import gql from "graphql-tag";\n\nexport const getHealth = gql`\n  query GetHealth {\n    health\n  }\n`;\n')),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"hooks")," are lifecyle functions for components"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'import { GetHealth } from "@/shared/home/data/__generated__/getHealth";\nimport { getHealth } from "@/shared/home/data/quries";\nimport { useQuery } from "react-apollo";\n\nexport const useGetHealth = () => {\n  const { loading, data, error, refetch } = useQuery<GetHealth>(getHealth, {\n    ssr: false\n  });\n  return { loading, data, error, refetch };\n};\n')),Object(o.b)("p",null,"And finally ",Object(o.b)("inlineCode",{parentName:"p"},"*-controller.tsx")," connects data with view components via hooks."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'import { useGetHealth } from "@/shared/home/hooks/use-health";\nimport React from "react";\nimport { HealthText } from "./components/health-text";\n\nexport const HealthController: React.FC = () => {\n  const { loading, data, error } = useGetHealth();\n  return <HealthText loading={loading} error={!!error} health={data?.health} />;\n};\n')),Object(o.b)("h2",{id:"internationalization"},"Internationalization"),Object(o.b)("p",null,"Onefx reads translations from ",Object(o.b)("inlineCode",{parentName:"p"},"./translations")," directory. Please create a file there named with a corresponding locale, for example, ",Object(o.b)("inlineCode",{parentName:"p"},"en.yaml"),". And then add an entry"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"homepage.hello: hello, ${userName}!\n")),Object(o.b)("h3",{id:"react--client-side"},"React / Client-side"),Object(o.b)("p",null,"and then in the react view file (client-side)"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import {t} from 'onefx/lib/iso-i18n';\n\nfunction Greetings() {\n  return (\n    <div>{t('homepage.hello', {userName: 'John'})}</div>\n  );\n}\n")),Object(o.b)("p",null,"When users visit this site with ",Object(o.b)("inlineCode",{parentName:"p"},"accept-language: en")," in the header, which is set by the browser, then they will see translated greetings. If you want to explicitly set the locale, then visit the page with a query string ",Object(o.b)("inlineCode",{parentName:"p"},"?locale=en")," then it will memorize this in the cookie."),Object(o.b)("h3",{id:"server-side"},"Server-side"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"t")," singleton function does not work in the server-side because the async calls may switch the context and mix it with requests from other languages. In this case, please use ",Object(o.b)("inlineCode",{parentName:"p"},"ctx.t")," instead."),Object(o.b)("h2",{id:"testing"},"Testing"),Object(o.b)("p",null,"test files are supposed to be placed in any module like ",Object(o.b)("inlineCode",{parentName:"p"},"./__test__/example.test.js")," in ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/avajs/ava/tree/master/docs"}),"ava test utils"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import test from 'ava';\n\ntest('testname', async t => {\n  // ...\n});\n\n")),Object(o.b)("h2",{id:"security"},"Security"),Object(o.b)("p",null,"Onefx enables secure web app development with"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"CSRF protection that can be exempted at ",Object(o.b)("inlineCode",{parentName:"li"},"./config/default.js")," (",Object(o.b)("inlineCode",{parentName:"li"},"config.server.noCsrfRoutes"),")"),Object(o.b)("li",{parentName:"ol"},"Helmet headers that can be exempted at ",Object(o.b)("inlineCode",{parentName:"li"},"config.server.noSecurityHeadersRoutes")),Object(o.b)("li",{parentName:"ol"},"Content Security Policy configured at ",Object(o.b)("inlineCode",{parentName:"li"},"config.csp"))),Object(o.b)("p",null,"for example, in ",Object(o.b)("inlineCode",{parentName:"p"},"default.js"),","),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"  server: {\n    noSecurityHeadersRoutes: {\n      '/embed/checkout/': true,\n    },\n    noCsrfRoutes: {\n      '/api-gateway/': true,\n    },\n  },\n  csp: {\n    'default-src': [\n      'none',\n    ],\n  }\n")),Object(o.b)("h2",{id:"static-assets"},"Static assets"),Object(o.b)("p",null,"Static assets are placed in ",Object(o.b)("inlineCode",{parentName:"p"},"./client/static/")," and loaded into the root directory of the website. Take ",Object(o.b)("inlineCode",{parentName:"p"},"./client/static/favicon.png")," for example, you can get it at ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"http://localhost:4100/favicon.png"}),"http://localhost:4100/favicon.png"),", or use it in the react component:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import {assetURL} from 'onefx/lib/asset-url';\n\nfunction ImgExample() {\n  return (\n    <img src={assetURL('favicon.png')}/>\n  );\n}\n")),Object(o.b)("h2",{id:"configuration"},"Configuration"),Object(o.b)("h3",{id:"environment-variables"},"Environment variables"),Object(o.b)("p",null,"The environment variable is read from commandline as well as ",Object(o.b)("inlineCode",{parentName:"p"},".env")," file. Take ",Object(o.b)("inlineCode",{parentName:"p"},"PORT")," for example,"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"PORT=4004 npm run watch\n")),Object(o.b)("p",null,"or in ",Object(o.b)("inlineCode",{parentName:"p"},".env")," file"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-env"}),"PORT=4004\n")),Object(o.b)("p",null,"In the js file, you can read the value by ",Object(o.b)("inlineCode",{parentName:"p"},"process.env.PORT"),"."),Object(o.b)("h3",{id:"static-configuration"},"Static configuration"),Object(o.b)("p",null,"The static configuration is located in ",Object(o.b)("inlineCode",{parentName:"p"},"./config")," and can be read according to the environment variable ",Object(o.b)("inlineCode",{parentName:"p"},"NODE_ENV"),"."),Object(o.b)("h3",{id:"cdn"},"CDN"),Object(o.b)("p",null,"If you want to setup CDN for the static resources, I recommend ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://bunnycdn.com/?ref=qrv5hbyzrq"}),"BunnyCDN")," for its ease-of-use and cost-effectiveness. Then configure OneFx as"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"module.exports = {\n  // ...\n  server: {\n    // ...\n    cdnBase: 'https://example-cdn.net',\n  }\n  // ...\n}\n")),Object(o.b)("p",null,"And then when loading static assets, you just follow the same practice with the static assets."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import {assetURL} from 'onefx/lib/asset-url';\n\nfunction ImgExample() {\n  return (\n    <img src={assetURL('favicon.png')}/>\n  );\n}\n")),Object(o.b)("h2",{id:"references"},"References"),Object(o.b)("p",null,"Tech Stack"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://reactjs.org/"}),"react - view")),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/rtsao/styletron"}),"styletron - local style in JS")),Object(o.b)("li",{parentName:"ul"},"sass - global style in sass"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://css-tricks.com/snippets/css/a-guide-to-flexbox/"}),"flexbox - view layout")))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://redux.js.org/"}),"redux - state management"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"http://koajs.com/"}),"Koa.js - server"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.apollographql.com/"}),"graphql apollo - api gateway"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://mongoosejs.com/"}),"MongoDB mongoose - database ODM"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"http://docs.sequelizejs.com/"}),"MySQL sequalize - database ORM")))),Object(o.b)("p",null,"Design Resources"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"http://carbondesignsystem.com/"}),"Carbon Design System")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"http://fontawesome.io/"}),"Font Awesome")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://www.flaticon.com/"}),"flaticon - icons and graphics"))),Object(o.b)("h2",{id:"run-on-windows"},"Run on Windows"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"install ",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://docs.microsoft.com/en-us/windows/wsl/install-win10"}),"Windows Subsystem for Linux"),". Choose Ubuntu, for example."),Object(o.b)("li",{parentName:"ol"},"On WSL Ubuntu, install node version manager and install the latest lts dubnium")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash\nexport NVM_DIR="$HOME/.nvm"\n[ -s "$NVM_DIR/nvm.sh" ] && \\. "$NVM_DIR/nvm.sh"  # This loads nvm\n[ -s "$NVM_DIR/bash_completion" ] && \\. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion\n\nnvm ls\nnvm install lts/Dubnium\nnvm use lts/dubnium\n')),Object(o.b)("ol",{start:3},Object(o.b)("li",{parentName:"ol"},"clone repo to ",Object(o.b)("inlineCode",{parentName:"li"},"C:/"))),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"cd /mnt/c/\ngit clone https://github.com/puncsky/web-onefx-boilerplate.git\n")),Object(o.b)("ol",{start:4},Object(o.b)("li",{parentName:"ol"},"install ",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://code.visualstudio.com/"}),"VS Code")," and open WSL terminal with ctrl + ` . Not sure about WSL terminal? Go to ",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://blogs.msdn.microsoft.com/commandline/2017/10/27/running-node-js-on-wsl-from-visual-studio-code/"}),"this post"),".")))}b.isMDXComponent=!0}}]);